name: Check and Release Tesla Vehicle Command Version

permissions:
  contents: write # To create releases and upload assets in this repository

on:
  schedule:
    - cron: '0 0 * * *' # Runs daily at midnight UTC
  workflow_dispatch:

jobs:
  check_and_release:
    runs-on: ubuntu-latest
    steps:
      - name: Get the latest version from Tesla Vehicle Command
        id: get_external_version
        run: |
          EXTERNAL_REPO_URL="https://raw.githubusercontent.com/teslamotors/vehicle-command/HEAD/pkg/account/version.txt"
          LATEST_VERSION=$(curl -s "$EXTERNAL_REPO_URL")
          echo "LATEST_VERSION=$LATEST_VERSION" >> "$GITHUB_OUTPUT"
          echo "Fetched latest version: $LATEST_VERSION"

      - name: Get Latest Release Version
        id: get_latest_release
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const { data: releases } = await github.rest.repos.listReleases({
                owner: context.repo.owner,
                repo: context.repo.repo,
                per_page: 1,
              });

              if (releases.length > 0) {
                core.setOutput('latest_release_tag', releases[0].tag_name);
                core.info(`Latest release tag: ${releases[0].tag_name}`);
              } else {
                core.setOutput('latest_release_tag', 'v0.0.0'); // Default if no releases
                core.info('No releases found. Setting default tag to v0.0.0');
              }
            } catch (error) {
              core.error(`Error fetching latest release: ${error}`);
              core.setOutput('latest_release_tag', 'v0.0.0');
            }

      - name: Compare Versions and Decide
        id: compare_versions
        run: |
          LATEST_VERSION="${{ steps.get_external_version.outputs.LATEST_VERSION }}"
          LATEST_RELEASE_TAG="${{ steps.get_latest_release.outputs.latest_release_tag }}"

          echo "Latest External Version: $LATEST_VERSION"
          echo "Latest Release Tag: $LATEST_RELEASE_TAG"

          # Simple comparison assuming tag format is 'vX.Y.Z'
          EXTERNAL_VERSION_NUMBER=$(echo "$LATEST_VERSION" | sed 's/[^0-9.]*//g')
          RELEASE_VERSION_NUMBER=$(echo "$LATEST_RELEASE_TAG" | sed 's/[^0-9.]*//g')

          if [[ $(echo "$EXTERNAL_VERSION_NUMBER" "$RELEASE_VERSION_NUMBER" | awk '{ if ($1 > $2) print "true"; else print "false"; }') == "true" ]]; then
            echo "NEW_VERSION_AVAILABLE=true" >> "$GITHUB_OUTPUT"
            echo "Newer version of Tesla Vehicle Command detected."
          else {
            echo "NEW_VERSION_AVAILABLE=false" >> "$GITHUB_OUTPUT"
            echo "No new version detected. Current release is up to date."
            exit 0 # Exit the workflow if no new version
          } fi

      - name: Checkout Tesla Vehicle Command (if new version)
        if: steps.compare_versions.outputs.NEW_VERSION_AVAILABLE == 'true'
        uses: actions/checkout@v4
        with:
          repository: teslamotors/vehicle-command

      - name: Checkout Workflow Repository (for patch) (if new version)
        if: steps.compare_versions.outputs.NEW_VERSION_AVAILABLE == 'true'
        uses: actions/checkout@v4
        with:
          path: workflow_repo # Checkout to a specific directory to avoid conflicts

      - name: Set up Go (if new version)
        if: steps.compare_versions.outputs.NEW_VERSION_AVAILABLE == 'true'
        uses: actions/setup-go@v3
        with:
          go-version: '>=1.23'

      - name: Clean Go Cache (armv7) (if new version)
        if: steps.compare_versions.outputs.NEW_VERSION_AVAILABLE == 'true'
        run: go clean -cache

      - name: Build Tesla Vehicle Command for linux/armv7 (if new version)
        if: steps.compare_versions.outputs.NEW_VERSION_AVAILABLE == 'true'
        run: |
          echo "Building all utilities under ./cmd for linux/armv7..."
          mkdir -p build/linux-armv7
          export GOOS=linux
          export GOARCH=arm
          export GOARM=7
          go build -o build/linux-armv7 ./cmd/...

      - name: Create armv7 Binary Archive (if new version)
        id: create_armv7_binary_archive
        if: steps.compare_versions.outputs.NEW_VERSION_AVAILABLE == 'true'
        run: |
          echo "Creating tar.gz archive of armv7 binaries..."
          cd build/linux-armv7
          ARCHIVE_ARMV7="vehicle-command-binaries-linux-armv7.tar.gz"
          tar -czvf "$ARCHIVE_ARMV7" ./*
          echo "ARMV7_ARCHIVE=$PWD/$ARCHIVE_ARMV7" >> "$GITHUB_OUTPUT"

      - name: Apply ARMv6 Patch (if new version)
        if: steps.compare_versions.outputs.NEW_VERSION_AVAILABLE == 'true'
        run: |
          echo "Applying BT4 patch for armv6 build using git apply..."
          git apply workflow_repo/0001-Lower-ScanningFilterPolicy-for-BT-4.patch

      - name: Clean Go Cache (armv6) (if new version)
        if: steps.compare_versions.outputs.NEW_VERSION_AVAILABLE == 'true'
        run: go clean -cache

      - name: Build Tesla Vehicle Command for linux/armv6 (if new version)
        if: steps.compare_versions.outputs.NEW_VERSION_AVAILABLE == 'true'
        run: |
          echo "Building all utilities under ./cmd for linux/armv6..."
          mkdir -p build/linux-armv6
          export GOOS=linux
          export GOARCH=arm
          export GOARM=6
          go build -o build/linux-armv6 ./cmd/...

      - name: Create armv6 Binary Archive (if new version)
        id: create_armv6_binary_archive
        if: steps.compare_versions.outputs.NEW_VERSION_AVAILABLE == 'true'
        run: |
          echo "Creating tar.gz archive of armv6 binaries..."
          cd build/linux-armv6
          ARCHIVE_ARMV6="vehicle-command-binaries-linux-armv6.tar.gz"
          tar -czvf "$ARCHIVE_ARMV6" ./*
          echo "ARMV6_ARCHIVE=$PWD/$ARCHIVE_ARMV6" >> "$GITHUB_OUTPUT"

      - name: Create New Release (if new version)
        id: create_new_release
        if: steps.compare_versions.outputs.NEW_VERSION_AVAILABLE == 'true'
        uses: ncipollo/release-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag: "v${{ steps.get_external_version.outputs.LATEST_VERSION }}"
          name: "Tesla Vehicle Command v${{ steps.get_external_version.outputs.LATEST_VERSION }}"
          body: |
            New version of Tesla Vehicle Command binaries.
          draft: false
          prerelease: false
          makeLatest: true
          allowUpdates: true
          artifacts: ${{ steps.create_armv7_binary_archive.outputs.ARMV7_ARCHIVE }}, ${{ steps.create_armv6_binary_archive.outputs.ARMV6_ARCHIVE }}
          artifactErrorsFailBuild: true
